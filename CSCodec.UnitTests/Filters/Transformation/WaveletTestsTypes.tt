<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# string[] typegenSigned = new string[]{"Int32", "Int24", "Int16", "SByte", "Single", "Double"}; #>
<# string[] typegenCasted = new string[]{"Int24", "Int16", "SByte"}; #>
<# string[] typegenFloat = new string[]{"Single"}; #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using NUnit.Framework;
using CSCodec.Filters.Transformation;
using CSCodec.Debug;

namespace CSCodec.UnitTests.Filters.Transformation
{

	public partial class WaveletTests
	{
		<#foreach(var type in typegenCasted){#>
		[TestCase]
		public void TestHaarReversiblity<#= type #>()
		{
			<#= type #>[] array = new <#= type #>[2048];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = (<#= type #>)(<#= type #>.MaxValue * Math.Sin(2.0 * Math.PI * i / array.Length));
			}
			<#= type #>[] copy = new <#= type #>[array.Length];
			Array.Copy(array, copy, array.Length);

			Span<<#= type #>> span = new Span<<#= type #>>(array);

			WaveletTransformation.HaarMultiLevel(span);
			WaveletTransformation.HaarInverseMultiLevel(span);

			for (int i = 0; i < array.Length; i++)
			{
				Assert.AreEqual(copy[i], array[i]);
			}
		}

		[TestCase]
		public void TestCDF53Reversibility<#= type #>()
		{
			<#= type #>[] array = new <#= type #>[2048];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = (<#= type #>)(<#= type #>.MaxValue * Math.Sin(2.0 * Math.PI * i / array.Length));
			}
			<#= type #>[] copy = new <#= type #>[array.Length];
			Array.Copy(array, copy, array.Length);
			Span<<#= type #>> span = new Span<<#= type #>>(array);

			WaveletTransformation.CDF53MultiLevel(span);
			WaveletTransformation.CDF53InverseMultiLevel(span);

			for (int i = 0; i < array.Length; i++)
			{
				Assert.AreEqual(copy[i], array[i]);
			}
		}
		<#}#>
		<#foreach(var type in typegenFloat){#>

		[TestCase]
		public void TestHaarReversiblity<#= type #>()
		{
			<#= type #>[] array = new <#= type #>[2048];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = (<#= type #>)Math.Sin(2.0 * Math.PI * i / array.Length);
			}
			<#= type #>[] copy = new <#= type #>[array.Length];
			Array.Copy(array, copy, array.Length);

			Span<<#= type #>> span = new Span<<#= type #>>(array);

			WaveletTransformation.HaarMultiLevel(span);
			Span<<#= type #>> transformed = stackalloc <#= type #>[array.Length];
			span.CopyTo(transformed);

			WaveletTransformation.HaarInverseMultiLevel(span);

			try
			{
				for (int i = 0; i < array.Length; i++)
				{
					Assert.AreEqual(copy[i], array[i], -1.0 / short.MinValue);
				}
				Console.WriteLine("Source,Transformed");
				for (int i = 0; i < array.Length; i++)
				{
					Console.WriteLine($"{copy[i]}, {transformed[i]}");
				}
			}
			catch (Exception)
			{
				Console.WriteLine("Expected,Actual");
				for (int i = 0; i < array.Length; i++)
				{
					Console.WriteLine($"{copy[i]}, {array[i]}");
				}
				throw;
			}
		}

		[TestCase]
		public void TestCDF53Reversiblity<#= type #>()
		{
			<#= type #>[] array = new <#= type #>[2048];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = (<#= type #>)Math.Sin(2.0 * Math.PI * i / array.Length);
			}
			<#= type #>[] copy = new <#= type #>[array.Length];
			Array.Copy(array, copy, array.Length);

			Span<<#= type #>> span = new Span<<#= type #>>(array);

			WaveletTransformation.CDF53MultiLevel(span);

			Span<<#= type #>> transformed = stackalloc <#= type #>[array.Length];
			span.CopyTo(transformed);

			WaveletTransformation.CDF53InverseMultiLevel(span);

			try
			{
				for (int i = 0; i < array.Length; i++)
				{
					Assert.AreEqual(copy[i], array[i], -1.0 / short.MinValue);
				}
				Console.WriteLine("Source,Transformed");
				for (int i = 0; i < array.Length; i++)
				{
					Console.WriteLine($"{copy[i]}, {transformed[i]}");
				}
			}
			catch (Exception)
			{
				Console.WriteLine("Expected,Actual");
				for (int i = 0; i < array.Length; i++)
				{
					Console.WriteLine($"{copy[i]}, {array[i]}");
				}
				throw;
			}
		}
		<#}#>
	}
}
