<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# string[] typegenSigned = new string[]{"int", "Int24", "short", "sbyte", "float", "double"}; #>
<# string[] typegenCasted = new string[]{"Int24", "short", "sbyte"}; #>
<# string[] typegenFloat = new string[]{"float", "double"}; #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Diagnostics;
using System.Numerics;
using System.Runtime.CompilerServices;
namespace CSCodec.Filters.Transformation
{
	public static partial class WaveletTransformation
	{
		<#foreach(var type in typegenSigned){#>

		/// <summary>
		/// Performs The Multi-Level Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
		/// </summary>
		/// <param name="span">The Transforming span.</param>
		[DebuggerNonUserCode()]
		public static void CDF53MultiLevel(Span<<#= type #>> span)
		{
			if (!span.Length.IsPowerOfTwo()) throw new ArgumentException("The length of span must be power of 2!", nameof(span));
			span.ArrangeOddEven(out Span<<#= type #>> even, out Span<<#= type #>> odd);
			do
			{
				CDF53Internal(even, odd);
				even.ArrangeOddEven(out var newEven, out odd);
				even = newEven;
			} while (even.Length > 1);
			CDF53Internal(even, odd);	//Last Loop is equivalent to Haar transform
		}

		/// <summary>
		/// Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
		/// </summary>
		/// <param name="span">The Transforming span.</param>
		[DebuggerNonUserCode()]
		private static void CDF53InverseMultiLevelInternal(Span<<#= type #>> span)
		{
			unchecked
			{
				if (span.Length == 2)
				{
					span.SplitHalfInternal(out var even2, out var odd2);
					CDF53InverseInternal(even2, odd2);	//Last Loop is equivalent to Haar transform
					return;
				}
				span.SplitHalfInternal(out var front, out var back);
				CDF53InverseMultiLevelInternal(front);
				CDF53InverseInternal(front, back);
				span.MergeOddEvenInternal(out var even, out var odd);
			}
		}

		/// <summary>
		/// Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
		/// </summary>
		/// <param name="span">The Transforming span.</param>
		[DebuggerNonUserCode()]
		public static void CDF53InverseMultiLevel(Span<<#= type #>> span)
		{
			if (!span.Length.IsPowerOfTwo()) throw new ArgumentException("The length of span must be power of 2!", nameof(span));
			CDF53InverseMultiLevelInternal(span);
		}

		<#} // TypegenSigned #>

		<#foreach(var type in typegenCasted){#>

		/// <summary>
		/// Performs The 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
		/// </summary>
		/// <param name="even">The even.</param>
		/// <param name="odd">The odd.</param>
		private static void CDF53Internal(in Span<<#= type #>> even, in Span<<#= type #>> odd)
		{
			unchecked
			{
				for (int i = 0; i < odd.Length - 1; i++)
				{
					//-Predict
					odd[i] -= (<#= type #>)((even[i] + even[i + 1]) >> 1);
				}
				odd[odd.Length - 1] -= even[even.Length - 1];
				even[0] += (<#= type #>)((odd[0] + 1) >> 1);
				for (int i = 1; i < even.Length; i++)
				{
					//+Update
					even[i] += (<#= type #>)((odd[i - 1] + odd[i] + 2) >> 2);
				}
			}
		}

		/// <summary>
		/// Performs The Inverse 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
		/// </summary>
		/// <param name="even">The even.</param>
		/// <param name="odd">The odd.</param>
		private static void CDF53InverseInternal(in Span<<#= type #>> even, in Span<<#= type #>> odd)
		{
			unchecked
			{
				even[0] -= (<#= type #>)((odd[0] + 1) >> 1);
				for (int i = 1; i < even.Length; i++)
				{
					//-Update
					even[i] -= (<#= type #>)((odd[i - 1] + odd[i] + 2) >> 2);
				}
				for (int i = 0; i < even.Length - 1; i++)
				{
					//+Predict
					odd[i] += (<#= type #>)((even[i] + even[i + 1]) >> 1);
				}
				odd[odd.Length - 1] += even[even.Length - 1];
			}
		}
		<#}#>
		<#foreach(var type in typegenFloat){#>

		/// <summary>
		/// Performs The 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
		/// </summary>
		/// <param name="even">The even.</param>
		/// <param name="odd">The odd.</param>
		private static void CDF53Internal(in Span<<#= type #>> even, in Span<<#= type #>> odd)
		{
			unchecked
			{
				int i;
				for (i = 0; i < odd.Length - 1; i++)
				{
					//-Predict
					odd[i] -= 0.5f * (even[i] + even[i + 1]);
				}
				odd[i] -= even[i];

				even[0] += 0.5f * odd[0];
				for (i = 1; i < even.Length; i++)
				{
					//+Update
					even[i] += 0.25f * (odd[i - 1] + odd[i]);
				}
			}
		}

		/// <summary>
		/// Performs The Inverse 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
		/// </summary>
		/// <param name="even">The even.</param>
		/// <param name="odd">The odd.</param>
		private static void CDF53InverseInternal(in Span<<#= type #>> even, in Span<<#= type #>> odd)
		{
			unchecked
			{
				int i;
				even[0] -= 0.5f * odd[0];
				for (i = 1; i < odd.Length; i++)
				{
					//-Update
					even[i] -= 0.25f * (odd[i - 1] + odd[i]);
				}

				for (i = 0; i < even.Length - 1; i++)
				{
					//+Predict
					odd[i] += 0.5f * (even[i] + even[i + 1]);
				}
				odd[i] += even[i];
			}
		}
		<#}#>

	}
}
