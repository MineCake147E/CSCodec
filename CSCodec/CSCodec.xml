<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSCodec</name>
    </assembly>
    <members>
        <member name="T:CSCodec.Binary.BitOrder">
            <summary>
            Represents Bit Order
            </summary>
        </member>
        <member name="F:CSCodec.Binary.BitOrder.HighFirst">
            <summary>
            Higher-bit first(MSB is head)
            </summary>
        </member>
        <member name="F:CSCodec.Binary.BitOrder.LowFirst">
            <summary>
            Lower-bit first(LSB is head)
            </summary>
        </member>
        <member name="T:CSCodec.Binary.BitReader">
            <summary>
            Reads data in bit.
            </summary>
        </member>
        <member name="F:CSCodec.Binary.BitReader.disposedValue">
            <summary>
            The value which indicates whether this instance is disposed or not.
            </summary>
        </member>
        <member name="P:CSCodec.Binary.BitReader.ByteOrder">
            <summary>
            Gets or sets the byte order for reading integers larger than 8bit.
            </summary>
            <value>
            The byte order.
            </value>
        </member>
        <member name="F:CSCodec.Binary.BitReader.BaseStream">
            <summary>
            The base stream
            </summary>
        </member>
        <member name="P:CSCodec.Binary.BitReader.IsEOF">
            <summary>
            Gets a value indicating whether this instance is EOF.
            </summary>
            <value>
              <c>true</c> if this instance is EOF; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CSCodec.Binary.BitReader.internalCache">
            <summary>
            The buffer
            </summary>
        </member>
        <member name="P:CSCodec.Binary.BitReader.BitsRemaining">
            <summary>
            Gets the number of bits remaining. Equivalent to 8 - <see cref="F:CSCodec.Binary.BitReader.currentIndex"/>.
            </summary>
            <value>
            The number of bits remaining.
            </value>
        </member>
        <member name="M:CSCodec.Binary.BitReader.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCodec.Binary.BitReader"/> class.
            </summary>
            <param name="BaseStream">The base stream.</param>
            <param name="bufferSize">The internal buffer's size in bytes.</param>
            <exception cref="T:System.ArgumentNullException">BaseStream</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">BufferWidth - BufferWidth must be equal or greater than 16!</exception>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadBit">
            <summary>
            Reads the next bit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadByte">
            <summary>
            Reads the next byte value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadSignedByte">
            <summary>
            Reads the next signed byte value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadUInt16">
            <summary>
            Reads the next UInt16 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadInt16">
            <summary>
            Reads the next Int16 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadUInt32">
            <summary>
            Reads the next UInt32 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadInt32">
            <summary>
            Reads the next Int32 value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadUInt64">
            <summary>
            Reads the next UInt64 value.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadInt64">
            <summary>
            Reads the next Int64 value.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadBytes(System.Memory{System.Byte})">
            <summary>
            Reads the bytes from this stream.
            </summary>
            <param name="outBuffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadEnumHighToLow``1(System.Int32)">
            <summary>
            Reads the next specified N-bit enum from current stream(Higher-bits first).
            </summary>
            <typeparam name="T">The <see cref="T:System.Enum"/> type in specified bit width.</typeparam>
            <param name="width">The number of bits to read.
            0 means that <see cref="M:CSCodec.Binary.BitReader.ReadEnumHighToLow``1(System.Int32)"/> reads the <see cref="P:CSCodec.Binary.EnumBitWidthAttribute.BitWidth"/> for reading.</param>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadEnumLowToHigh``1(System.Int32)">
            <summary>
            Reads the next specified N-bit unsigned enum from current stream(Lower-bits first).
            </summary>
            <typeparam name="T">The <see cref="T:System.Enum"/> type in specified bit width.</typeparam>
            <param name="width">The number of bits to read.
            0 means that <see cref="M:CSCodec.Binary.BitReader.ReadEnumHighToLow``1(System.Int32)"/> reads the <see cref="P:CSCodec.Binary.EnumBitWidthAttribute.BitWidth"/> for reading.</param>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadBitsHighToLow(System.Int32)">
            <summary>
            Reads the next specified N-bit unsigned stream from current stream(Higher-bits first).
            </summary>
            <param name="size">The number of bits to read.</param>
            <returns>Little-Endianed(Probably) BigInteger value that contains <paramref name="size"/> bits unsigned integer.</returns>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadBitsLowToHigh(System.Int32)">
            <summary>
            Reads the next specified N-bit unsigned stream from current stream(Lower-bits first).
            </summary>
            <param name="size">The number of bits to read.</param>
            <returns>Little-Endianed(Probably) BigInteger value that contains <paramref name="size"/> bits unsigned integer.</returns>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadBitsHighToLowShorterThan64(System.Int32)">
            <summary>
            Reads the next specified N-bit unsigned stream from current stream(Higher-bits first).
            </summary>
            <param name="size">The number of bits to read.</param>
            <returns>UInt64 value that contains <paramref name="size"/> bits unsigned integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">size - Size must be smaller than 64 and larger than 0!</exception>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadBitsLowToHighShorterThan64(System.Int32)">
            <summary>
            Reads the next specified N-bit unsigned stream from current stream(Lower-bits first).
            </summary>
            <param name="size">The number of bits to read.</param>
            <returns>UInt64 value that contains <paramref name="size"/> bits unsigned integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">size - Size must be smaller than 64 and larger than 0!</exception>
        </member>
        <member name="M:CSCodec.Binary.BitReader.ReadRemainingBitsInIntermediateBuffer(System.Byte@,System.Int32@)">
            <summary>
            Reads the remaining bits in intermediate buffer.
            Can be used for skipping aligning zeros.
            </summary>
            <param name="value"></param>
            <param name="length"></param>
        </member>
        <member name="M:CSCodec.Binary.BitReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CSCodec.Binary.BitReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CSCodec.Binary.BitWriter">
            <summary>
            Writes data in bit.
            </summary>
        </member>
        <member name="F:CSCodec.Binary.BitWriter.disposedValue">
            <summary>
            The value which indicates whether this instance is disposed or not.
            </summary>
        </member>
        <member name="F:CSCodec.Binary.BitWriter.BaseStream">
            <summary>
            The base stream
            </summary>
        </member>
        <member name="P:CSCodec.Binary.BitWriter.ByteOrder">
            <summary>
            Gets or sets the byte order for reading integers larger than 8bit.
            </summary>
            <value>
            The byte order.
            </value>
        </member>
        <member name="P:CSCodec.Binary.BitWriter.InternalBuffer">
            <summary>
            Gets or sets the buffer.
            </summary>
            <value>
            The buffer.
            </value>
        </member>
        <member name="P:CSCodec.Binary.BitWriter.PositionedBuffer">
            <summary>
            Gets the positioned buffer.
            </summary>
            <value>
            The positioned buffer.
            </value>
        </member>
        <member name="P:CSCodec.Binary.BitWriter.PrimitiveBuffer">
            <summary>
            The primitive buffer
            </summary>
        </member>
        <member name="P:CSCodec.Binary.BitWriter.ConversionBuffer">
            <summary>
            The flushing conversion buffer.
            </summary>
        </member>
        <member name="F:CSCodec.Binary.BitWriter.Position">
            <summary>
            The position of Buffer in Bytes.
            </summary>
        </member>
        <member name="F:CSCodec.Binary.BitWriter.location">
            <summary>
            The location of cache in bits.
            </summary>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCodec.Binary.BitWriter"/> class.
            </summary>
            <param name="BaseStream">The base stream.</param>
            <param name="bufferSize">Size of the buffer divided by <c>sizeof(int)</c>.</param>
            <exception cref="T:System.ArgumentNullException">BaseStream</exception>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.Flush">
            <summary>
             Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteBit(System.Boolean)">
            <summary>
            Writes the specified single bit.
            </summary>
            <param name="value">The bit value to write. 1 when <c>true</c>, 0 when <c>false</c>.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteByte(System.Byte)">
            <summary>
            Writes the specified <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteSignedByte(System.SByte)">
            <summary>
            Writes the specified <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteUInt16(System.UInt16)">
            <summary>
            Writes the specified <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteInt16(System.Int16)">
            <summary>
            Writes the specified <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteUInt32(System.UInt32)">
            <summary>
            Writes the specified <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteInt32(System.Int32)">
            <summary>
            Writes the specified <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteUInt64(System.UInt64)">
            <summary>
            Writes the specified <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteInt64(System.Int64)">
            <summary>
            Writes the specified <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteDouble(System.Double)">
            <summary>
            Writes the specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteFloat(System.Single)">
            <summary>
            Writes the specified <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteBytes(System.Span{System.Byte})">
            <summary>
            Writes the specified <see cref="T:System.Byte"/> array.
            </summary>
            <param name="values">The values to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes the specified <see cref="T:System.Byte"/> array.
            </summary>
            <param name="values">The values to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified <see cref="T:System.Byte"/> array.
            </summary>
            <param name="values">The values to write.</param>
            <param name="offset">The index to start writing.</param>
            <param name="count">The number of values to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteBitsHighToLow(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Writes the specified unsigned <see cref="T:System.Numerics.BigInteger"/> value(Higher-bits first).
            </summary>
            <param name="value">The value to write.</param>
            <param name="width">The number of bits to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteBitsLowToHigh(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Writes the specified unsigned <see cref="T:System.Numerics.BigInteger"/> value(Lower-bits first).
            </summary>
            <param name="value">The value to write.</param>
            <param name="width">The number of bits to write.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteEnumHighToLow``1(``0,System.Int32)">
            <summary>
            Writes the specified unsigned <see cref="T:System.Numerics.BigInteger"/> value(Higher-bits first).
            </summary>
            <param name="value">The value to write.</param>
            <param name="width">The number of bits to write.
            0 means that <see cref="M:CSCodec.Binary.BitWriter.WriteEnumHighToLow``1(``0,System.Int32)"/> reads the <see cref="P:CSCodec.Binary.EnumBitWidthAttribute.BitWidth"/> for writing.</param>
            <typeparam name="T">The Enum definition to write.</typeparam>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.WriteEnumLowToHigh``1(``0,System.Int32)">
            <summary>
            Writes the specified unsigned <see cref="T:System.Numerics.BigInteger"/> value(Lower-bits first).
            </summary>
            <param name="value">The value to write.</param>
            <param name="width">The number of bits to write.
            0 means that <see cref="M:CSCodec.Binary.BitWriter.WriteEnumLowToHigh``1(``0,System.Int32)"/> reads the <see cref="P:CSCodec.Binary.EnumBitWidthAttribute.BitWidth"/> for writing.</param>
            <typeparam name="T">The Enum definition to write.</typeparam>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.AlignInBytes(System.Boolean)">
            <summary>
            Aligns the in bytes.
            </summary>
            <param name="defaultValue">The bit value to write for padding. 1 when <c>true</c>, 0 when <c>false</c>.</param>
            <returns>The number of bits written.</returns>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.ReverseEndianessIfNessesary(System.UInt64)">
            <summary>
            Reverses the endianess if nessesary.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.ReverseEndianessIfNessesary(System.UInt32)">
            <summary>
            Reverses the endianess if nessesary.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.ReverseEndianessIfNessesary(System.UInt16)">
            <summary>
            Reverses the endianess if nessesary.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.ReverseEndianessIfNessesary(System.Numerics.BigInteger)">
            <summary>
            Reverses the endianess if nessesary.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CSCodec.Binary.BitWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CSCodec.Binary.ByteOrder">
            <summary>
            Represents ByteOrder
            </summary>
        </member>
        <member name="F:CSCodec.Binary.ByteOrder.LittleEndian">
            <summary>
            Little Endian(0x01234567 => 0x67 0x45 0x23 0x01)
            </summary>
        </member>
        <member name="F:CSCodec.Binary.ByteOrder.BigEndian">
            <summary>
            Big Endian(0x01234567 => 0x01 0x23 0x45 0x67)
            </summary>
        </member>
        <member name="T:CSCodec.Binary.Checksum.Crc16">
            <summary>
            An Implementation of 16bit Cyclic Redundancy Check
            </summary>
            <seealso cref="T:CSCodec.Binary.Checksum.CrcBase`1" />
        </member>
        <member name="F:CSCodec.Binary.Checksum.Crc16.PolynomialCRC16IBM">
            <summary>
            The polynomial CRC-16 IBM x^16 + x^15 + x^2 + 1
            </summary>
        </member>
        <member name="P:CSCodec.Binary.Checksum.Crc16.CurrentOutput">
            <summary>
            Gets the current output.
            </summary>
            <value>
            The current output.
            </value>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc16.#ctor(System.UInt16,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCodec.Binary.Checksum.Crc16"/> class.
            </summary>
            <param name="polynomial">The polynomial.</param>
            <param name="initialState">Initial internal state.</param>
            <param name="xorOutput">The xor output.</param>
            <param name="reverseInput">if set to <c>true</c> this instance have to reverse input.</param>
            <param name="reverseOutput">if set to <c>true</c> this instance have to reverse output.</param>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc16.InitializeTable">
            <summary>
            Initializes the Crc Table.
            </summary>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc16.CalculateNext(System.Byte)">
            <summary>
            Appends the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc16.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc16.Reverse(System.UInt16)">
            <summary>
            Reverses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:CSCodec.Binary.Checksum.Crc32">
            <summary>
            An Implementation of 32bit Cyclic Redundancy Check
            </summary>
            <seealso cref="T:CSCodec.Binary.Checksum.CrcBase`1" />
        </member>
        <member name="P:CSCodec.Binary.Checksum.Crc32.CurrentOutput">
            <summary>
            Gets the current output.
            </summary>
            <value>
            The current output.
            </value>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc32.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCodec.Binary.Checksum.Crc32"/> class.
            </summary>
            <param name="polynomial">The polynomial.</param>
            <param name="initialState">Initial internal state.</param>
            <param name="xorOutput">The xor output.</param>
            <param name="reverseInput">if set to <c>true</c> this instance have to reverse input.</param>
            <param name="reverseOutput">if set to <c>true</c> this instance have to reverse output.</param>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc32.InitializeTable">
            <summary>
            Initializes the Crc Table.
            </summary>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc32.CalculateNext(System.Byte)">
            <summary>
            Appends the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc32.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc32.Reverse(System.UInt32)">
            <summary>
            Reverses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:CSCodec.Binary.Checksum.Crc8">
            <summary>
            An Implementation of 8bit Cyclic Redundancy Check
            </summary>
            <seealso cref="T:CSCodec.Binary.Checksum.CrcBase`1" />
        </member>
        <member name="F:CSCodec.Binary.Checksum.Crc8.PolynomialCRC8CCITT">
            <summary>
            The polynomial of CRC-8-CCITT x^8 + x^2 + x^1 + 1
            </summary>
        </member>
        <member name="P:CSCodec.Binary.Checksum.Crc8.CurrentOutput">
            <summary>
            Gets the current output.
            </summary>
            <value>
            The current output.
            </value>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc8.#ctor(System.Byte,System.Byte,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCodec.Binary.Checksum.Crc8"/> class.
            </summary>
            <param name="polynomial">The polynomial.</param>
            <param name="initialState">Initial internal state.</param>
            <param name="xorOutput">The xor output.</param>
            <param name="reverseInput">if set to <c>true</c> this instance have to reverse input.</param>
            <param name="reverseOutput">if set to <c>true</c> this instance have to reverse output.</param>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc8.InitializeTable">
            <summary>
            Initializes the table using specified polynomial.
            </summary>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc8.CalculateNext(System.Byte)">
            <summary>
            Appends the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc8.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CSCodec.Binary.Checksum.Crc8.Reverse(System.Byte)">
            <summary>
            Reverses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:CSCodec.Binary.Checksum.CrcBase`1">
            <summary>
            A Base Class for Implementations of Cyclic Redundancy Check
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CSCodec.Binary.Checksum.CrcBase`1.Polynomial">
            <summary>
            Gets or sets the polynomial for this CRC Instance.
            </summary>
            <value>
            The polynomial.
            </value>
        </member>
        <member name="P:CSCodec.Binary.Checksum.CrcBase`1.InternalState">
            <summary>
            Gets or sets the internal state.
            </summary>
            <value>
            The internal state.
            </value>
        </member>
        <member name="P:CSCodec.Binary.Checksum.CrcBase`1.CurrentOutput">
            <summary>
            Gets the current output.
            </summary>
            <value>
            The current output.
            </value>
        </member>
        <member name="P:CSCodec.Binary.Checksum.CrcBase`1.InitialState">
            <summary>
            Gets the initial state.
            </summary>
            <value>
            The initial state.
            </value>
        </member>
        <member name="P:CSCodec.Binary.Checksum.CrcBase`1.XorOutput">
            <summary>
            Gets or sets the value to xor output.
            </summary>
            <value>
            The xor output.
            </value>
        </member>
        <member name="P:CSCodec.Binary.Checksum.CrcBase`1.ReverseInput">
            <summary>
            Gets or sets a value indicating whether to reverse input.
            </summary>
            <value>
              <c>true</c> if this instance have to reverse input; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CSCodec.Binary.Checksum.CrcBase`1.ReverseOutput">
            <summary>
            Gets or sets a value indicating whether to reverse output.
            </summary>
            <value>
              <c>true</c> if this instance have to reverse output; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CSCodec.Binary.Checksum.CrcBase`1.CalculateNext(System.Byte)">
            <summary>
            Appends the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CSCodec.Binary.Checksum.CrcBase`1.InitializeTable">
            <summary>
            Initializes the Crc Table.
            </summary>
        </member>
        <member name="M:CSCodec.Binary.Checksum.CrcBase`1.Reverse(`0)">
            <summary>
            Reverses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Binary.Checksum.CrcBase`1.Append(System.Byte)">
            <summary>
            Appends the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CSCodec.Binary.Checksum.CrcBase`1.#ctor(`0,`0,`0,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCodec.Binary.Checksum.CrcBase`1"/> class.
            </summary>
            <param name="polynomial">The polynomial.</param>
            <param name="initialState">Initial internal state.</param>
            <param name="xorOutput">The xor output.</param>
            <param name="reverseInput">if set to <c>true</c> this instance have to reverse input.</param>
            <param name="reverseOutput">if set to <c>true</c> this instance have to reverse output.</param>
        </member>
        <member name="M:CSCodec.Binary.Checksum.CrcBase`1.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:CSCodec.Binary.Checksum.CrcBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CSCodec.Binary.Checksum.CrcBase`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CSCodec.Binary.CustomCoderBase">
             <summary>
            
             </summary>
             TODO Edit XML Comment Template for CustomCoderBase
        </member>
        <member name="T:CSCodec.Binary.EnumBitWidthAttribute">
            <summary>
            An attribute that explains how many bits the Enum spends for recording.
            BitReader and BitWriter assumes the specified Enum has the specified width.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:CSCodec.Binary.EnumBitWidthAttribute.BitWidth">
            <summary>
            Gets the Width of the Enum in bits.
            </summary>
            <value>
            The Width of the Enum in bits.
            </value>
        </member>
        <member name="M:CSCodec.Binary.EnumBitWidthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCodec.Binary.EnumBitWidthAttribute"/> class.
            </summary>
            <param name="BitWidth">Width of the Enum in bits.</param>
        </member>
        <member name="T:CSCodec.IntegerMath">
            <summary>
            Arithmetic utilities for integral types.
            </summary>
        </member>
        <member name="T:CSCodec.AudioEncoding">
            <summary>
            Defines known encoding types.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Unknown">
            <summary>
            Unknown format
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Pcm">
            <summary>
            Microsoft PCM Format
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.MsAdpcm">
            <summary>
            Microsoft ADPCM Format
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.IeeeFloat">
            <summary>
            IEEE 754 Single Precision Floating-Point Number
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Vselp">
            <summary>
            Vector sum excited linear prediction Compaq Computer Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.IbmCvsd">
            <summary>
            IBM Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Alaw">
            <summary>
            A-law format by Microsoft Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Mulaw">
            <summary>
            μ-law format by Microsoft Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.OkiAdpcm">
            <summary>
            OKI ADPCM
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.ImaAdpcm">
            <summary>
            Intel Corporation ADPCM
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.MediaspaceAdpcm">
            <summary>
            Videologic ADPCM
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.SierraAdpcm">
            <summary>
            Sierra Semiconductor Corp
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.G723Adpcm">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Digistd">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Digifix">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.DialogicOkiAdpcm">
            <summary>
            Dialogic Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.MediavisionAdpcm">
            <summary>
            Media Vision, Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.CuCodec">
            <summary>
            Hewlett-Packard Company
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.YamahaAdpcm">
            <summary>
            Yamaha Corporation of America
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Sonarc">
            <summary>
            Speech Compression
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.DspgroupTruespeech">
            <summary>
            DSP Group, Inc
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Echosc1">
            <summary>
            Echo Speech Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.AudiofileAf36">
            <summary>
            Audiofile, Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Aptx">
            <summary>
            Audio Processing Technology
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.AudiofileAf10">
            <summary>
            Audiofile, Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Prosody1612">
            <summary>
            Aculab plc
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Lrc">
            <summary>
            Merging Technologies S.A.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.DolbyAc2">
            <summary>
            Dolby Laboratories
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Gsm610">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Msnaudio">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.AntexAdpcme">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.ControlResVqlpc">
            <summary>
            Control Resources Limited
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Digireal">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Digiadpcm">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.ControlResCr10">
            <summary>
            Control Resources Limited
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.NmsVbxadpcm">
            <summary>
            Natural MicroSystems
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.RolandRdac">
            <summary>
            Roland
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Echosc3">
            <summary>
            Echo Speech Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.RockwellAdpcm">
            <summary>
            Rockwell International
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.RockwellDigitalk">
            <summary>
            Rockwell International
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Xebec">
            <summary>
            Xebec Multimedia Solutions Limited
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.G721Adpcm">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.G728Celp">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Msg723">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Mpeg">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Rt24">
            <summary>
            InSoft Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Pac">
            <summary>
            InSoft Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Mpeglayer3">
            <summary>
            MPEG 3 Layer 1
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.LucentG723">
            <summary>
            Lucent Technologies
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Cirrus">
            <summary>
            Cirrus Logic
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Espcm">
            <summary>
            ESS Technology
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Voxware">
            <summary>
            Voxware Inc
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.CanopusAtrac">
            <summary>
            Canopus, Co., Ltd.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.G726Adpcm">
            <summary>
            APICOM
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.G722Adpcm">
            <summary>
            APICOM
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Dsat">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.DsatDisplay">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VoxwareByteAligned">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VoxwareAc8">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VoxwareAc10">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VoxwareAc16">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VoxwareAc20">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VoxwareRt24">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VoxwareRt29">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VoxwareRt29hw">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VoxwareVr12">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VoxwareVr18">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VoxwareTq40">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Softsound">
            <summary>
            Softsound, Ltd.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VoxareTq60">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Msrt24">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.G729a">
            <summary>
            AT&amp;T Laboratories
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.MviMv12">
            <summary>
            Motion Pixels
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.DfG726">
            <summary>
            DataFusion Systems (Pty) (Ltd)
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.DfGsm610">
            <summary>
            DataFusion Systems (Pty) (Ltd)
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Onlive">
            <summary>
            OnLive! Technologies, Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Sbc24">
            <summary>
            Siemens Business Communications Systems
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.DolbyAc3Spdif">
            <summary>
            Sonic Foundry
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.ZyxelAdpcm">
            <summary>
            ZyXEL Communications, Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.PhilipsLpcbb">
            <summary>
            Philips Speech Processing
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Packed">
            <summary>
            Studer Professional Audio AG
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.RhetorexAdpcm">
            <summary>
            Rhetorex, Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.IbmMulaw">
            <summary>
            IBM mu-law format
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.IbmAlaw">
            <summary>
            IBM a-law format
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Adpcm">
            <summary>
            IBM AVC Adaptive Differential PCM format
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VivoG723">
            <summary>
            Vivo Software
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VivoSiren">
            <summary>
            Vivo Software
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.DigitalG723">
            <summary>
            Digital Equipment Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.CreativeAdpcm">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.CreativeFastspeech8">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.CreativeFastspeech10">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Quarterdeck">
            <summary>
            Quarterdeck Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.FmTownsSnd">
            <summary>
            Fujitsu Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.BzvDigital">
            <summary>
            Brooktree Corporation
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.VmeVmpcm">
            <summary>
            AT&amp;T Labs, Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Oligsm">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Oliadpcm">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Olicelp">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Olisbc">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Oliopr">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.LhCodec">
            <summary>
            Lernout &amp; Hauspie
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Norris">
            <summary>
            Norris Communications, Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.SoundspaceMusicompress">
            <summary>
            AT&amp;T Labs, Inc.
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Dvm">
            <summary>
            FAST Multimedia AG
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.InterwavVsc112">
            <summary>
            ?????
            </summary>
        </member>
        <member name="F:CSCodec.AudioEncoding.Extensible">
             <summary>
            
             </summary>
        </member>
        <member name="T:CSCodec.Debug.DebugUtils">
            <summary>
            Debugging utilities
            </summary>
        </member>
        <member name="M:CSCodec.Debug.DebugUtils.DumpArray``1(System.Span{``0},System.String)">
            <summary>
            Dumps the array to the Console.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="format">The formatting codes.</param>
        </member>
        <member name="T:CSCodec.Filters.Prediction.Autocorrelation">
             <summary>
            
             </summary>
        </member>
        <member name="M:CSCodec.Filters.Prediction.Autocorrelation.CalculateAutocorrelation(System.ReadOnlySpan{System.Double},System.Span{System.Double}@,System.Int32,System.Boolean)">
            <summary>
            Calculates the autocorrelation of specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="acorr">The resulting autocorrelation.</param>
            <param name="order">The order.</param>
            <param name="useFftIfPossible">if set to <c>true</c> it uses FFT if possible.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.Autocorrelation.CalculateAutocorrelation(System.ReadOnlySpan{System.Single},System.Span{System.Single}@,System.Int32,System.Boolean)">
            <summary>
            Calculates the autocorrelation of specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="acorr">The resulting autocorrelation.</param>
            <param name="order">The order.</param>
            <param name="useFftIfPossible">if set to <c>true</c> it uses FFT if possible.</param>
        </member>
        <member name="T:CSCodec.Filters.Prediction.IPredictor`1">
            <summary>
            Basic Definitions for Predictors.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CSCodec.Filters.Prediction.IPredictor`1.Initialize(System.ReadOnlySpan{`0},System.Int32,System.Span{`0}@)">
            <summary>
            Initializes the Predictor using specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="Order">The order of predictor.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.IPredictor`1.Predict(System.ReadOnlySpan{`0},System.Span{`0})">
            <summary>
            Predicts outputs from the specified first data.
            </summary>
            <param name="first">The first data.</param>
            <param name="output">The prediction output without overlapping <paramref name="first"/>. <paramref name="first"/> will be copied first.</param>
        </member>
        <member name="T:CSCodec.Filters.Prediction.LinearPredictorBase`1">
            <summary>
            Base Definition of Linear Prediction.
            </summary>
            <typeparam name="T">Type to predict.</typeparam>
        </member>
        <member name="F:CSCodec.Filters.Prediction.LinearPredictorBase`1.disposed">
            <summary>
            The value which indicates whether this instance is disposed or not.
            </summary>
        </member>
        <member name="P:CSCodec.Filters.Prediction.LinearPredictorBase`1.Coefficients">
            <summary>
            Gets the coefficients.
            </summary>
            <value>
            The coefficients.
            </value>
        </member>
        <member name="P:CSCodec.Filters.Prediction.LinearPredictorBase`1.Order">
            <summary>
            Gets the order of this instance.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorBase`1.Initialize(System.ReadOnlySpan{`0},System.Int32,System.Span{`0}@)">
            <summary>
            Initializes the Linear Predictor using specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="Order">The order of predictor.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorBase`1.Reset(System.ReadOnlySpan{`0})">
            <summary>
            Resets this instance using specified coefficents.
            </summary>
            <param name="coefficents">The coefficents to be set.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorBase`1.Reset(`0)">
            <summary>
            Resets this instance using specified global coefficient.
            </summary>
            <param name="fill">The coefficents to be set.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorBase`1.Predict(System.ReadOnlySpan{`0},System.Span{`0})">
            <summary>
            Predicts outputs from the specified first data.
            </summary>
            <param name="first">The first data.</param>
            <param name="output">The prediction output without overlapping <paramref name="first"/>. <paramref name="first"/> will be copied first.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorBase`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CSCodec.Filters.Prediction.LinearPredictorDouble">
            <summary>
            Implementation of double-precision Linear Predictor.
            </summary>
            <seealso cref="T:CSCodec.Filters.Prediction.LinearPredictorBase`1" />
        </member>
        <member name="F:CSCodec.Filters.Prediction.LinearPredictorDouble.CEpsilon">
            <summary>
            The machine epsilon for <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorDouble.Initialize(System.ReadOnlySpan{System.Double},System.Int32,System.Span{System.Double}@)">
            <summary>
            Initializes the Linear Predictor using specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="Order">The order of predictor.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorDouble.Predict(System.ReadOnlySpan{System.Double},System.Span{System.Double})">
            <summary>
            Predicts the specified first.
            </summary>
            <param name="first">The first data.</param>
            <param name="output">The prediction output without overlapping <paramref name="first" />. <paramref name="first"/> will be copied first.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorDouble.LevinsonDurbinRecursion(System.Span{System.Double},System.ReadOnlySpan{System.Double},System.Int32,System.Span{System.Double}@)">
            <summary>
            Levinson durbin recursion calculation.
            </summary>
            <param name="coeff">The coeff.</param>
            <param name="acorr">The acorr.</param>
            <param name="order">The order.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorDouble.Reset(System.ReadOnlySpan{System.Double})">
            <summary>
            Resets this instance using specified coefficents.
            </summary>
            <param name="coefficents">The coefficents to be set.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorDouble.Reset(System.Double)">
            <summary>
            Resets this instance using specified global coefficient.
            </summary>
            <param name="fill">The coefficents to be set.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorDouble.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:CSCodec.Filters.Prediction.LinearPredictorFloat">
            <summary>
            Implementation of single-precision Linear Predictor.
            </summary>
            <seealso cref="T:CSCodec.Filters.Prediction.LinearPredictorBase`1" />
        </member>
        <member name="F:CSCodec.Filters.Prediction.LinearPredictorFloat.CEpsilon">
            <summary>
            The machine epsilon for <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorFloat.Initialize(System.ReadOnlySpan{System.Single},System.Int32,System.Span{System.Single}@)">
            <summary>
            Initializes the Linear Predictor using specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="Order">The order of predictor.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorFloat.LevinsonDurbinRecursion(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.Int32,System.Span{System.Single}@)">
            <summary>
            Levinson durbin recursion calculation.
            </summary>
            <param name="coeff">The coeff.</param>
            <param name="acorr">The acorr.</param>
            <param name="order">The order.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorFloat.Predict(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>
            Predicts outputs from the specified first data.
            </summary>
            <param name="first">The first data.</param>
            <param name="output">The prediction output without overlapping <paramref name="first" />. <paramref name="first" /> will be copied first.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorFloat.Reset(System.ReadOnlySpan{System.Single})">
            <summary>
            Resets this instance using specified coefficents.
            </summary>
            <param name="coefficents">The coefficents to be set.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorFloat.Reset(System.Single)">
            <summary>
            Resets this instance using specified global coefficient.
            </summary>
            <param name="fill">The coefficents to be set.</param>
        </member>
        <member name="M:CSCodec.Filters.Prediction.LinearPredictorFloat.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:CSCodec.Filters.Transformation.DiscreteCosineTransformation">
            <summary>
            Implements Discrete Cosine Transformation(DCT).
            </summary>
        </member>
        <member name="M:CSCodec.Filters.Transformation.DiscreteCosineTransformation.PerformIV(System.Span{System.Double})">
            <summary>
            Calculates Discrete Cosine Transform Type-IV for real input <paramref name="span"/>.
            </summary>
            <param name="span">The specified input.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.DiscreteCosineTransformation.PerformInverseIV(System.Span{System.Double})">
            <summary>
            Calculates Inverse Discrete Cosine Transform Type-IV for real input <paramref name="span"/>.
            </summary>
            <param name="span">The specified input.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.DiscreteCosineTransformation.PerformIV(System.Span{System.Single})">
            <summary>
            Calculates Discrete Cosine Transform Type-IV for real input <paramref name="span"/>.
            </summary>
            <param name="span">The specified input.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.DiscreteCosineTransformation.PerformInverseIV(System.Span{System.Single})">
            <summary>
            Calculates Inverse Discrete Cosine Transform Type-IV for real input <paramref name="span"/>.
            </summary>
            <param name="span">The specified input.</param>
        </member>
        <member name="T:CSCodec.Filters.Transformation.FastFourierTransformation">
            <summary>
            Functions that performs Fast Fourier Transform.
            </summary>
        </member>
        <member name="F:CSCodec.Filters.Transformation.FastFourierTransformation.powerRootsOfUnity">
            <summary>
            Contains (1 &lt;&lt; n) root of unity.
            </summary>
        </member>
        <member name="M:CSCodec.Filters.Transformation.FastFourierTransformation.Reverse``1(System.Span{``0})">
            <summary>
            Bit-Reversal
            </summary>
            <param name="span">The in/out span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.FastFourierTransformation.Perform(System.Span{System.Numerics.Complex},CSCodec.Filters.Transformation.FftMode)">
            <summary>
            Performs forward transform to the specified span.
            </summary>
            <param name="span">The span.</param>
            <param name="mode">The FFT's Mode.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.FastFourierTransformation.Perform(System.Span{System.Numerics.ComplexF},CSCodec.Filters.Transformation.FftMode)">
            <summary>
            Performs forward transform to the specified span.
            </summary>
            <param name="span">The span.</param>
            <param name="mode">The FFT's Mode.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.FastFourierTransformation.FFT(System.Span{System.Numerics.Complex},CSCodec.Filters.Transformation.FftMode)">
            <summary>
            Transforms the specified span using Cooley-Tukey algorithm.
            </summary>
            <param name="span">The buffer.</param>
            <param name="mode">The FFT's Mode.</param>
            <exception cref="T:System.ArgumentException">The length of span must be power of 2! - span</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.FastFourierTransformation.FFT(System.Span{System.Numerics.ComplexF},CSCodec.Filters.Transformation.FftMode)">
            <summary>
            Transforms the specified span using Cooley-Tukey algorithm.
            </summary>
            <param name="span">The buffer.</param>
            <param name="mode">The FFT's Mode.</param>
            <exception cref="T:System.ArgumentException">The length of span must be power of 2! - span</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.FastFourierTransformation.FFT(System.Numerics.Complex[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified buffer using Cooley-Tukey algorithm.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.FastFourierTransformation.FFT(System.Numerics.ComplexF[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified buffer using Cooley-Tukey algorithm.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
        </member>
        <member name="T:CSCodec.Filters.Transformation.FftMode">
            <summary>
            Fast Fourier Transformation Modes
            </summary>
        </member>
        <member name="F:CSCodec.Filters.Transformation.FftMode.Forward">
            <summary>
            The forward transform.
            </summary>
        </member>
        <member name="F:CSCodec.Filters.Transformation.FftMode.Backward">
            <summary>
            The backward transform.
            </summary>
        </member>
        <member name="T:CSCodec.Filters.Transformation.TimeDomainAliasingCancellation">
            <summary>
            Time Domain Aliasing Cancellation Helper class.
            In fact, not only DCT-IV, any reversible transform (e.g. wavelet transform) can be applied for TDAC.
            </summary>
        </member>
        <member name="M:CSCodec.Filters.Transformation.TimeDomainAliasingCancellation.PrepareInput(System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Prepares the specified input for the Time Domain Aliasing Cancellation Calculation.
            </summary>
            <param name="input">The input buffer.</param>
            <param name="output">The output buffer. Must be 1/2 times as long as input.</param>
            <exception cref="T:System.ArgumentException">output must be 1/2 times as long as input.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.TimeDomainAliasingCancellation.PostProcess(System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Processes the specified input for the Time Domain Aliasing Cancellation Calculation.
            </summary>
            <param name="input">The input buffer.</param>
            <param name="output">The output buffer. Must be 2 times as long as input.</param>
            <exception cref="T:System.ArgumentException">output must be at least 2 times as long as vs.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.TimeDomainAliasingCancellation.PrepareInput(System.Span{System.Double}@,System.Span{System.Double}@)">
            <summary>
            Prepares the specified input for the Time Domain Aliasing Cancellation Calculation.
            </summary>
            <param name="input">The input buffer.</param>
            <param name="output">The output buffer. Must be 1/2 times as long as input.</param>
            <exception cref="T:System.ArgumentException">output must be 1/2 times as long as input.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.TimeDomainAliasingCancellation.PostProcess(System.Span{System.Double}@,System.Span{System.Double}@)">
            <summary>
            Processes the specified input for the Time Domain Aliasing Cancellation Calculation.
            </summary>
            <param name="input">The input buffer.</param>
            <param name="output">The output buffer. Must be 2 times as long as input.</param>
            <exception cref="T:System.ArgumentException">output must be at least 2 times as long as vs.</exception>
        </member>
        <member name="T:CSCodec.Filters.Transformation.WaveletTransformation">
            <summary>
            Performs Wavelet Transforms.
            </summary>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53MultiLevel(System.Span{System.Int32})">
            <summary>
            Performs The Multi-Level Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseMultiLevelInternal(System.Span{System.Int32})">
            <summary>
            Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseMultiLevel(System.Span{System.Int32})">
            <summary>
            Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53MultiLevel(System.Span{CSCodec.Int24})">
            <summary>
            Performs The Multi-Level Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseMultiLevelInternal(System.Span{CSCodec.Int24})">
            <summary>
            Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseMultiLevel(System.Span{CSCodec.Int24})">
            <summary>
            Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53MultiLevel(System.Span{System.Int16})">
            <summary>
            Performs The Multi-Level Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseMultiLevelInternal(System.Span{System.Int16})">
            <summary>
            Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseMultiLevel(System.Span{System.Int16})">
            <summary>
            Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53MultiLevel(System.Span{System.SByte})">
            <summary>
            Performs The Multi-Level Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseMultiLevelInternal(System.Span{System.SByte})">
            <summary>
            Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseMultiLevel(System.Span{System.SByte})">
            <summary>
            Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53MultiLevel(System.Span{System.Single})">
            <summary>
            Performs The Multi-Level Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseMultiLevelInternal(System.Span{System.Single})">
            <summary>
            Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseMultiLevel(System.Span{System.Single})">
            <summary>
            Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53MultiLevel(System.Span{System.Double})">
            <summary>
            Performs The Multi-Level Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseMultiLevelInternal(System.Span{System.Double})">
            <summary>
            Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseMultiLevel(System.Span{System.Double})">
            <summary>
            Performs The Multi-Level Inverse Cohen–Daubechies–Feauveau (LeGall) 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53Internal(System.Span{CSCodec.Int24},System.Span{CSCodec.Int24})">
            <summary>
            Performs The 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="even">The even.</param>
            <param name="odd">The odd.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseInternal(System.Span{CSCodec.Int24},System.Span{CSCodec.Int24})">
            <summary>
            Performs The Inverse 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="even">The even.</param>
            <param name="odd">The odd.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53Internal(System.Span{System.Int16},System.Span{System.Int16})">
            <summary>
            Performs The 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="even">The even.</param>
            <param name="odd">The odd.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseInternal(System.Span{System.Int16},System.Span{System.Int16})">
            <summary>
            Performs The Inverse 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="even">The even.</param>
            <param name="odd">The odd.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53Internal(System.Span{System.SByte},System.Span{System.SByte})">
            <summary>
            Performs The 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="even">The even.</param>
            <param name="odd">The odd.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseInternal(System.Span{System.SByte},System.Span{System.SByte})">
            <summary>
            Performs The Inverse 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="even">The even.</param>
            <param name="odd">The odd.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53Internal(System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Performs The 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="even">The even.</param>
            <param name="odd">The odd.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseInternal(System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Performs The Inverse 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="even">The even.</param>
            <param name="odd">The odd.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53Internal(System.Span{System.Double},System.Span{System.Double})">
            <summary>
            Performs The 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="even">The even.</param>
            <param name="odd">The odd.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseInternal(System.Span{System.Double},System.Span{System.Double})">
            <summary>
            Performs The Inverse 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="even">The even.</param>
            <param name="odd">The odd.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarMultiLevel(System.Span{System.Int32})">
            <summary>
            Performs The Multi-Level Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseMultiLevelInternal(System.Span{System.Int32})">
            <summary>
            Performs The Multi-Level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseMultiLevel(System.Span{System.Int32})">
            <summary>
            Performs The Multi-Level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarMultiLevel(System.Span{CSCodec.Int24})">
            <summary>
            Performs The Multi-Level Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseMultiLevelInternal(System.Span{CSCodec.Int24})">
            <summary>
            Performs The Multi-Level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseMultiLevel(System.Span{CSCodec.Int24})">
            <summary>
            Performs The Multi-Level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarMultiLevel(System.Span{System.Int16})">
            <summary>
            Performs The Multi-Level Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseMultiLevelInternal(System.Span{System.Int16})">
            <summary>
            Performs The Multi-Level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseMultiLevel(System.Span{System.Int16})">
            <summary>
            Performs The Multi-Level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarMultiLevel(System.Span{System.SByte})">
            <summary>
            Performs The Multi-Level Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseMultiLevelInternal(System.Span{System.SByte})">
            <summary>
            Performs The Multi-Level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseMultiLevel(System.Span{System.SByte})">
            <summary>
            Performs The Multi-Level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarMultiLevel(System.Span{System.Single})">
            <summary>
            Performs The Multi-Level Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseMultiLevelInternal(System.Span{System.Single})">
            <summary>
            Performs The Multi-Level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseMultiLevel(System.Span{System.Single})">
            <summary>
            Performs The Multi-Level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarMultiLevel(System.Span{System.Double})">
            <summary>
            Performs The Multi-Level Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseMultiLevelInternal(System.Span{System.Double})">
            <summary>
            Performs The Multi-Level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseMultiLevel(System.Span{System.Double})">
            <summary>
            Performs The Multi-Level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="span">The Transforming span.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseInternal(System.Span{CSCodec.Int24},System.Span{CSCodec.Int24})">
            <summary>
            Performs The 1-level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInternal(System.Span{CSCodec.Int24},System.Span{CSCodec.Int24})">
            <summary>
            Performs The 1-level Haar Transform to the specified elements.
            </summary>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseInternal(System.Span{System.Int16},System.Span{System.Int16})">
            <summary>
            Performs The 1-level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInternal(System.Span{System.Int16},System.Span{System.Int16})">
            <summary>
            Performs The 1-level Haar Transform to the specified elements.
            </summary>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseInternal(System.Span{System.SByte},System.Span{System.SByte})">
            <summary>
            Performs The 1-level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInternal(System.Span{System.SByte},System.Span{System.SByte})">
            <summary>
            Performs The 1-level Haar Transform to the specified elements.
            </summary>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseInternal(System.Span{System.Int32},System.Span{System.Int32})">
            <summary>
            Performs The 1-level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInternal(System.Span{System.Int32},System.Span{System.Int32})">
            <summary>
            Performs The 1-level Haar Transform to the specified elements.
            </summary>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseInternal(System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Performs The 1-level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInternal(System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Performs The 1-level Haar Transform to the specified elements.
            </summary>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInverseInternal(System.Span{System.Double},System.Span{System.Double})">
            <summary>
            Performs The 1-level Inverse Haar Transform to the specified elements.
            </summary>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.HaarInternal(System.Span{System.Double},System.Span{System.Double})">
            <summary>
            Performs The 1-level Haar Transform to the specified elements.
            </summary>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitOddEven(System.Span{System.Int32},System.Span{System.Int32}@,System.Span{System.Int32}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.ArrangeOddEven(System.Span{System.Int32}@,System.Span{System.Int32}@,System.Span{System.Int32}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitHalf(System.Span{System.Int32},System.Span{System.Int32}@,System.Span{System.Int32}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitHalfInternal(System.Span{System.Int32}@,System.Span{System.Int32}@,System.Span{System.Int32}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.MergeOddEven(System.Span{System.Int32},System.Span{System.Int32}@,System.Span{System.Int32}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="destination">The destination.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.MergeOddEvenInternal(System.Span{System.Int32}@,System.Span{System.Int32}@,System.Span{System.Int32}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="destination">The destination.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitOddEven(System.Span{CSCodec.Int24},System.Span{CSCodec.Int24}@,System.Span{CSCodec.Int24}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.ArrangeOddEven(System.Span{CSCodec.Int24}@,System.Span{CSCodec.Int24}@,System.Span{CSCodec.Int24}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitHalf(System.Span{CSCodec.Int24},System.Span{CSCodec.Int24}@,System.Span{CSCodec.Int24}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitHalfInternal(System.Span{CSCodec.Int24}@,System.Span{CSCodec.Int24}@,System.Span{CSCodec.Int24}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.MergeOddEven(System.Span{CSCodec.Int24},System.Span{CSCodec.Int24}@,System.Span{CSCodec.Int24}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="destination">The destination.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.MergeOddEvenInternal(System.Span{CSCodec.Int24}@,System.Span{CSCodec.Int24}@,System.Span{CSCodec.Int24}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="destination">The destination.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitOddEven(System.Span{System.Int16},System.Span{System.Int16}@,System.Span{System.Int16}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.ArrangeOddEven(System.Span{System.Int16}@,System.Span{System.Int16}@,System.Span{System.Int16}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitHalf(System.Span{System.Int16},System.Span{System.Int16}@,System.Span{System.Int16}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitHalfInternal(System.Span{System.Int16}@,System.Span{System.Int16}@,System.Span{System.Int16}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.MergeOddEven(System.Span{System.Int16},System.Span{System.Int16}@,System.Span{System.Int16}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="destination">The destination.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.MergeOddEvenInternal(System.Span{System.Int16}@,System.Span{System.Int16}@,System.Span{System.Int16}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="destination">The destination.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitOddEven(System.Span{System.SByte},System.Span{System.SByte}@,System.Span{System.SByte}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.ArrangeOddEven(System.Span{System.SByte}@,System.Span{System.SByte}@,System.Span{System.SByte}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitHalf(System.Span{System.SByte},System.Span{System.SByte}@,System.Span{System.SByte}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitHalfInternal(System.Span{System.SByte}@,System.Span{System.SByte}@,System.Span{System.SByte}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.MergeOddEven(System.Span{System.SByte},System.Span{System.SByte}@,System.Span{System.SByte}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="destination">The destination.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.MergeOddEvenInternal(System.Span{System.SByte}@,System.Span{System.SByte}@,System.Span{System.SByte}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="destination">The destination.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitOddEven(System.Span{System.Single},System.Span{System.Single}@,System.Span{System.Single}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.ArrangeOddEven(System.Span{System.Single}@,System.Span{System.Single}@,System.Span{System.Single}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitHalf(System.Span{System.Single},System.Span{System.Single}@,System.Span{System.Single}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitHalfInternal(System.Span{System.Single}@,System.Span{System.Single}@,System.Span{System.Single}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.MergeOddEven(System.Span{System.Single},System.Span{System.Single}@,System.Span{System.Single}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="destination">The destination.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.MergeOddEvenInternal(System.Span{System.Single}@,System.Span{System.Single}@,System.Span{System.Single}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="destination">The destination.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitOddEven(System.Span{System.Double},System.Span{System.Double}@,System.Span{System.Double}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.ArrangeOddEven(System.Span{System.Double}@,System.Span{System.Double}@,System.Span{System.Double}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitHalf(System.Span{System.Double},System.Span{System.Double}@,System.Span{System.Double}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.SplitHalfInternal(System.Span{System.Double}@,System.Span{System.Double}@,System.Span{System.Double}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.MergeOddEven(System.Span{System.Double},System.Span{System.Double}@,System.Span{System.Double}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="destination">The destination.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.MergeOddEvenInternal(System.Span{System.Double}@,System.Span{System.Double}@,System.Span{System.Double}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <param name="destination">The destination.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53Internal(System.Span{System.Int32},System.Span{System.Int32})">
            <summary>
            Performs The 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="even">The even.</param>
            <param name="odd">The odd.</param>
        </member>
        <member name="M:CSCodec.Filters.Transformation.WaveletTransformation.CDF53InverseInternal(System.Span{System.Int32},System.Span{System.Int32})">
            <summary>
            Performs The 1-level Cohen–Daubechies–Feauveau LeGall 5/3 Wavelet Transform to the specified elements.
            </summary>
            <param name="even">The even.</param>
            <param name="odd">The odd.</param>
        </member>
        <member name="T:CSCodec.MathV">
            <summary>
            Hardware-Accelerated (or not) array manipulation.
            </summary>
        </member>
        <member name="P:CSCodec.MathV.IsSIMDSupported">
            <summary>
            Gets a value indicating whether SIMD is supported.
            </summary>
            <value>
              <c>true</c> if this instance is SIMD supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CSCodec.MathV.CopyReal(System.Span{System.Numerics.Complex},System.Span{System.Double}@)">
            <summary>
            Copies the real.
            </summary>
            <param name="complices">The complices.</param>
            <param name="destination">The destination.</param>
            <exception cref="T:System.ArgumentException">complices' length and destination's must be same!!!</exception>
        </member>
        <member name="M:CSCodec.MathV.ScaleArray(System.Span{System.Int32},System.Int32)">
            <summary>
            Scales <paramref name="span"/> with <paramref name="scale"/>.
            </summary>
            <param name="span">The array to scale.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:CSCodec.MathV.ScaleArray(System.Span{System.Int16},System.Int16)">
            <summary>
            Scales <paramref name="span"/> with <paramref name="scale"/>.
            </summary>
            <param name="span">The array to scale.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:CSCodec.MathV.ScaleArray(System.Span{System.Single},System.Single)">
            <summary>
            Scales <paramref name="span"/> with <paramref name="scale"/>.
            </summary>
            <param name="span">The array to scale.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:CSCodec.MathV.ScaleArray(System.Span{System.Double},System.Double)">
            <summary>
            Scales <paramref name="span"/> with <paramref name="scale"/>.
            </summary>
            <param name="span">The array to scale.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:CSCodec.MathV.AddArray(System.Span{System.Int32},System.ReadOnlySpan{System.Int32})">
            <summary>
            Adds values from <paramref name="bufferB"/> to <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA">The destination <see cref="T:System.Span`1"/></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.SubtractArray(System.Span{System.Int32},System.ReadOnlySpan{System.Int32})">
            <summary>
            Subtracts <paramref name="bufferB"/> from <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA"></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.AddArray(System.Span{System.UInt32},System.ReadOnlySpan{System.UInt32})">
            <summary>
            Adds values from <paramref name="bufferB"/> to <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA">The destination <see cref="T:System.Span`1"/></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.SubtractArray(System.Span{System.UInt32},System.ReadOnlySpan{System.UInt32})">
            <summary>
            Subtracts <paramref name="bufferB"/> from <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA"></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.AddArray(System.Span{System.Int64},System.ReadOnlySpan{System.Int64})">
            <summary>
            Adds values from <paramref name="bufferB"/> to <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA">The destination <see cref="T:System.Span`1"/></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.SubtractArray(System.Span{System.Int64},System.ReadOnlySpan{System.Int64})">
            <summary>
            Subtracts <paramref name="bufferB"/> from <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA"></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.AddArray(System.Span{System.UInt64},System.ReadOnlySpan{System.UInt64})">
            <summary>
            Adds values from <paramref name="bufferB"/> to <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA">The destination <see cref="T:System.Span`1"/></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.SubtractArray(System.Span{System.UInt64},System.ReadOnlySpan{System.UInt64})">
            <summary>
            Subtracts <paramref name="bufferB"/> from <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA"></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.AddArray(System.Span{System.Int16},System.ReadOnlySpan{System.Int16})">
            <summary>
            Adds values from <paramref name="bufferB"/> to <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA">The destination <see cref="T:System.Span`1"/></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.SubtractArray(System.Span{System.Int16},System.ReadOnlySpan{System.Int16})">
            <summary>
            Subtracts <paramref name="bufferB"/> from <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA"></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.AddArray(System.Span{System.UInt16},System.ReadOnlySpan{System.UInt16})">
            <summary>
            Adds values from <paramref name="bufferB"/> to <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA">The destination <see cref="T:System.Span`1"/></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.SubtractArray(System.Span{System.UInt16},System.ReadOnlySpan{System.UInt16})">
            <summary>
            Subtracts <paramref name="bufferB"/> from <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA"></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.AddArray(System.Span{System.SByte},System.ReadOnlySpan{System.SByte})">
            <summary>
            Adds values from <paramref name="bufferB"/> to <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA">The destination <see cref="T:System.Span`1"/></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.SubtractArray(System.Span{System.SByte},System.ReadOnlySpan{System.SByte})">
            <summary>
            Subtracts <paramref name="bufferB"/> from <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA"></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.AddArray(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Adds values from <paramref name="bufferB"/> to <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA">The destination <see cref="T:System.Span`1"/></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.SubtractArray(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Subtracts <paramref name="bufferB"/> from <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA"></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.AddArray(System.Span{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>
            Adds values from <paramref name="bufferB"/> to <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA">The destination <see cref="T:System.Span`1"/></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.SubtractArray(System.Span{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>
            Subtracts <paramref name="bufferB"/> from <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA"></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.AddArray(System.Span{System.Double},System.ReadOnlySpan{System.Double})">
            <summary>
            Adds values from <paramref name="bufferB"/> to <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA">The destination <see cref="T:System.Span`1"/></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.SubtractArray(System.Span{System.Double},System.ReadOnlySpan{System.Double})">
            <summary>
            Subtracts <paramref name="bufferB"/> from <paramref name="bufferA"/>.
            <paramref name="bufferA"/> will be overwritten.
            </summary>
            <param name="bufferA"></param>
            <param name="bufferB"></param>
        </member>
        <member name="M:CSCodec.MathV.NegateArray(System.Span{System.Int32})">
            <summary>
            Negates the specified <paramref name="span"/>.
            </summary>
            <param name="span">The region to Negate.</param>
        </member>
        <member name="M:CSCodec.MathV.NegateArray(System.Span{System.Int64})">
            <summary>
            Negates the specified <paramref name="span"/>.
            </summary>
            <param name="span">The region to Negate.</param>
        </member>
        <member name="M:CSCodec.MathV.NegateArray(System.Span{System.Single})">
            <summary>
            Negates the specified <paramref name="span"/>.
            </summary>
            <param name="span">The region to Negate.</param>
        </member>
        <member name="M:CSCodec.MathV.NegateArray(System.Span{System.Double})">
            <summary>
            Negates the specified <paramref name="span"/>.
            </summary>
            <param name="span">The region to Negate.</param>
        </member>
        <member name="M:CSCodec.MathV.NegateArray(System.Span{System.Int16})">
            <summary>
            Negates the specified <paramref name="span"/>.
            </summary>
            <param name="span">The region to Negate.</param>
        </member>
        <member name="M:CSCodec.MathV.NegateArray(System.Span{System.SByte})">
            <summary>
            Negates the specified <paramref name="span"/>.
            </summary>
            <param name="span">The region to Negate.</param>
        </member>
        <member name="T:CSCodec.Int24">
            <summary>
            An simple representation of 24bit signed integer.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="F:CSCodec.Int24.MaxValue">
            <summary>
            Represents the largest possible value of an System.Int24. This field is constant.
            </summary>
        </member>
        <member name="F:CSCodec.Int24.MinValue">
            <summary>
            Represents the smallest possible value of System.Int24. This field is constant.
            </summary>
        </member>
        <member name="M:CSCodec.Int24.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCodec.Int24"/> struct.
            </summary>
            <param name="value">The source <see cref="T:System.Int32"/> value. Mask:0x807fffff</param>
        </member>
        <member name="M:CSCodec.Int24.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:CSCodec.Int24"/> struct.
            </summary>
            <param name="head">The head.</param>
            <param name="middle">The middle.</param>
            <param name="tail">The tail.</param>
        </member>
        <member name="M:CSCodec.Int24.op_Implicit(CSCodec.Int24)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:CSCodec.Int24"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:CSCodec.Int24.op_Explicit(System.Int32)~CSCodec.Int24">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:CSCodec.Int24"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:CSCodec.Int24.op_Equality(CSCodec.Int24,CSCodec.Int24)">
            <summary>
            Indicates whether the values of two specified <see cref="T:CSCodec.Int24"/> objects are equal.
            </summary>
            <param name="int1">The first <see cref="T:CSCodec.Int24"/> to compare.</param>
            <param name="int2">The second <see cref="T:CSCodec.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CSCodec.Int24.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:CSCodec.Int24.op_UnaryNegation(CSCodec.Int24)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CSCodec.Int24.op_Inequality(CSCodec.Int24,CSCodec.Int24)">
            <summary>
            Indicates whether the values of two specified <see cref="T:CSCodec.Int24"/> objects are not equal.
            </summary>
            <param name="int1">The first <see cref="T:CSCodec.Int24"/> to compare.</param>
            <param name="int2">The second <see cref="T:CSCodec.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if int1 and int2 are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CSCodec.Int24.op_LessThan(CSCodec.Int24,CSCodec.Int24)">
            <summary>
            Determines whether one specified <see cref="T:CSCodec.Int24"/> is less than another specified <see cref="T:CSCodec.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:CSCodec.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:CSCodec.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is less than right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CSCodec.Int24.op_GreaterThan(CSCodec.Int24,CSCodec.Int24)">
            <summary>
            Determines whether one specified <see cref="T:CSCodec.Int24"/> is greater than another specified <see cref="T:CSCodec.Int24"/> value.
            </summary>
            <param name="left">The first <see cref="T:CSCodec.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:CSCodec.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is greater than right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CSCodec.Int24.op_LessThanOrEqual(CSCodec.Int24,CSCodec.Int24)">
            <summary>
            Returns a value that indicates whether a specified <see cref="T:CSCodec.Int24"/> is less than or equal to another specified <see cref="T:CSCodec.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:CSCodec.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:CSCodec.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is less than or equal to right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CSCodec.Int24.op_GreaterThanOrEqual(CSCodec.Int24,CSCodec.Int24)">
            <summary>
            Determines whether one specified <see cref="T:CSCodec.Int24"/> is greater than or equal to another specified <see cref="T:CSCodec.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:CSCodec.Int24"/> to compare.</param>
            <param name="right">The second  <see cref="T:CSCodec.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if <see cref="T:CSCodec.Int24"/> is greater than or equal to <see cref="T:CSCodec.Int24"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CSCodec.Int24.ReverseEndianness(CSCodec.Int24)">
            <summary>
            Reverses endianness of the given <see cref="T:CSCodec.Int24"/> value.
            </summary>
            <param name="value">The value to reverse endianness.</param>
            <returns></returns>
        </member>
        <member name="M:CSCodec.Int24.CompareTo(CSCodec.Int24)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:CSCodec.Int24"/> value and returns an integer that indicates whether this instance is less than, equal to, or greater than the specified <see cref="T:CSCodec.Int24"/> value.
            </summary>
            <param name="other">The <see cref="T:CSCodec.Int24"/> to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the other parameter.
            </returns>
        </member>
        <member name="M:CSCodec.Int24.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CSCodec.Int24.Equals(CSCodec.Int24)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:CSCodec.Int24.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:CSCodec.Utils.ArrayReadStream">
            <summary>
            A Stream that reads data from sprcified <see cref="T:System.Byte"/> array.
            </summary>
            <seealso cref="T:System.IO.Stream" />
        </member>
        <member name="M:CSCodec.Utils.ArrayReadStream.#ctor(System.Memory{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:CSCodec.Utils.ArrayReadStream"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:CSCodec.Utils.ArrayReadStream.Buffer">
            <summary>
            Gets or sets the memory to read.
            </summary>
            <value>
            The memory.
            </value>
        </member>
        <member name="P:CSCodec.Utils.ArrayReadStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:CSCodec.Utils.ArrayReadStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:CSCodec.Utils.ArrayReadStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:CSCodec.Utils.ArrayReadStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CSCodec.Utils.ArrayReadStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">value - Value must be between 0 and Memory's Length!</exception>
        </member>
        <member name="M:CSCodec.Utils.ArrayReadStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:CSCodec.Utils.ArrayReadStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:CSCodec.Utils.ArrayReadStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
        </member>
        <member name="M:CSCodec.Utils.ArrayReadStream.SetLength(System.Int64)">
            <summary>
            Not Supported. Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:CSCodec.Utils.ArrayReadStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not Supported. Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:CSCodec.Utils.ArrayReadStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"></see> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:CSCodec.Utils.LambdaStream">
            <summary>
            Lambda-Expression Specified Stream
            </summary>
            <seealso cref="T:System.IO.Stream" />
        </member>
        <member name="M:CSCodec.Utils.LambdaStream.op_Implicit(System.Func{System.Byte[],System.Int32,System.Int32,System.Int32})~CSCodec.Utils.LambdaStream">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Func`4"/> to <see cref="T:CSCodec.Utils.LambdaStream"/>.
            </summary>
            <param name="ReadFunction">The read function.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:CSCodec.Utils.LambdaStream.op_Implicit(System.Action{System.Byte[],System.Int32,System.Int32})~CSCodec.Utils.LambdaStream">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Action`3"/> to <see cref="T:CSCodec.Utils.LambdaStream"/>.
            </summary>
            <param name="WriteFunction">The write function.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:CSCodec.Utils.LambdaStream.#ctor(System.Func{System.Byte[],System.Int32,System.Int32,System.Int32},System.Func{System.Int64,System.IO.SeekOrigin,System.Int64},System.Action,System.Action{System.Byte[],System.Int32,System.Int32},System.Func{System.Int64},System.Action{System.Int64},System.Func{System.Int64},System.Action{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:CSCodec.Utils.LambdaStream"/> class.
            </summary>
            <param name="readFunction">The read function.</param>
            <param name="seekFunction">The seek function.</param>
            <param name="flushFunction">The flush function.</param>
            <param name="writeFunction">The write function.</param>
            <param name="lengthGetFunction">The length get function.</param>
            <param name="setLengthFunction">The set length function.</param>
            <param name="positionGetFunction">The position get function.</param>
            <param name="positionSetFunction">The position set function.</param>
        </member>
        <member name="P:CSCodec.Utils.LambdaStream.ReadFunction">
            <summary>
            Gets the <see cref="M:CSCodec.Utils.LambdaStream.Read(System.Byte[],System.Int32,System.Int32)"/> function.
            </summary>
            <value>
            The read function.
            </value>
        </member>
        <member name="P:CSCodec.Utils.LambdaStream.SeekFunction">
            <summary>
            Gets the <see cref="M:CSCodec.Utils.LambdaStream.Seek(System.Int64,System.IO.SeekOrigin)"/> function.
            </summary>
            <value>
            The seek function.
            </value>
        </member>
        <member name="P:CSCodec.Utils.LambdaStream.FlushFunction">
            <summary>
            Gets the <see cref="M:CSCodec.Utils.LambdaStream.Flush"/> function.
            </summary>
            <value>
            The flush function.
            </value>
        </member>
        <member name="P:CSCodec.Utils.LambdaStream.WriteFunction">
            <summary>
            Gets the <see cref="M:CSCodec.Utils.LambdaStream.Write(System.Byte[],System.Int32,System.Int32)"/> function.
            </summary>
            <value>
            The write function.
            </value>
        </member>
        <member name="P:CSCodec.Utils.LambdaStream.LengthGetFunction">
            <summary>
            Gets the <see cref="P:CSCodec.Utils.LambdaStream.Length"/> get function.
            </summary>
            <value>
            The length get function.
            </value>
        </member>
        <member name="P:CSCodec.Utils.LambdaStream.SetLengthFunction">
            <summary>
            Gets the <see cref="M:CSCodec.Utils.LambdaStream.SetLength(System.Int64)"/> function.
            </summary>
            <value>
            The set length function.
            </value>
        </member>
        <member name="P:CSCodec.Utils.LambdaStream.PositionGetFunction">
            <summary>
            Gets the <see cref="P:CSCodec.Utils.LambdaStream.Position"/> get function.
            </summary>
            <value>
            The position get function.
            </value>
        </member>
        <member name="P:CSCodec.Utils.LambdaStream.PositionSetFunction">
            <summary>
            Gets the <see cref="P:CSCodec.Utils.LambdaStream.Position"/> set function.
            </summary>
            <value>
            The position set function.
            </value>
        </member>
        <member name="P:CSCodec.Utils.LambdaStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:CSCodec.Utils.LambdaStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:CSCodec.Utils.LambdaStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:CSCodec.Utils.LambdaStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CSCodec.Utils.LambdaStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:CSCodec.Utils.LambdaStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CSCodec.Utils.LambdaStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:CSCodec.Utils.LambdaStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:CSCodec.Utils.LambdaStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:CSCodec.Utils.LambdaStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="T:System.MathB">
            <summary>
            Supports some bit arithmetics.
            </summary>
        </member>
        <member name="M:System.MathB.CountBits(System.UInt64)">
            <summary>
            same as floor(log2(i))
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.CountBits(System.UInt32)">
            <summary>
            same as floor(log2(i))
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.CountBits(System.UInt16)">
            <summary>
            same as floor(log2(i))
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.CountBits(System.Byte)">
            <summary>
            same as floor(log2(i))
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.ReverseBits(System.UInt32,System.Int32)">
            <summary>
            Reverses the bits of the specified value in specified width.
            </summary>
            <param name="i">The value.</param>
            <param name="width">The width in bits.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.ReverseBits(System.UInt64)">
            <summary>
            Reverses the bits of the specified value in 64bit.
            </summary>
            <param name="i">The value to reverse bit order.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.ReverseBits(System.UInt32)">
            <summary>
            Reverses the bits of the specified value in 32bit.
            </summary>
            <param name="i">The value to reverse bit order.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.ReverseBits(System.UInt16)">
            <summary>
            Reverses the bits of the specified value in 16bit.
            </summary>
            <param name="i">The value to reverse bit order.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.ReverseBits(System.Byte)">
            <summary>
            Reverses the bits of the specified value in 8bit.
            </summary>
            <param name="i">The value to reverse bit order.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.CountConsecutiveZeros(System.UInt32)">
            <summary>
            Counts the consecutive zero bits on the right.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.IsPowerOfTwo(System.UInt32)">
            <summary>
            Determines whether the specified <paramref name="i"/> is power of two.
            </summary>
            <param name="i">The value.</param>
            <returns>
              <c>true</c> if the specified value is power of two; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.MathB.IsPowerOfTwo(System.Int32)">
            <summary>
            Determines whether the specified <paramref name="i"/> is power of two.
            </summary>
            <param name="i">The value.</param>
            <returns>
              <c>true</c> if the specified value is power of two; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.MathB.ToUnsigned(System.Int64)">
            <summary>
            Converts to unsigned integer bitwisely(-1L => 0xFFFFFFFFFFFFFFFFUL without exception).
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.ToUnsigned(System.Int32)">
            <summary>
            Converts to unsigned integer bitwisely(-1 => 0xFFFFFFFFu without exception).
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.ToUnsigned(System.Int16)">
            <summary>
            Converts to unsigned integer bitwisely(-1 => 65535 without exception).
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.ToUnsigned(System.SByte)">
            <summary>
            Converts to unsigned integer bitwisely(-1 => 255 without exception).
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.ToSigned(System.UInt64)">
            <summary>
            Converts to signed integer bitwisely(0xFFFFFFFFFFFFFFFFUL => -1L without exception).
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.ToSigned(System.UInt32)">
            <summary>
            Converts to signed integer bitwisely(0xFFFFFFFFu => -1 without exception).
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.ToSigned(System.UInt16)">
            <summary>
            Converts to signed integer bitwisely(65535 => -1 without exception).
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathB.ToSigned(System.Byte)">
            <summary>
            Converts to signed integer bitwisely(255 => -1 without exception).
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="T:System.Numerics.ComplexF">
            <summary>
            <see cref="T:System.Numerics.Complex"/> like structure based on <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="P:System.Numerics.ComplexF.Real">
            <summary>
            Gets the real part of this instance.
            </summary>
            <value>
            The real part.
            </value>
        </member>
        <member name="P:System.Numerics.ComplexF.Imaginary">
            <summary>
            Gets the imaginary part of this instance.
            </summary>
            <value>
            The imaginary part.
            </value>
        </member>
        <member name="P:System.Numerics.ComplexF.Magnitude">
            <summary>
            Gets the magnitude of this instance.
            </summary>
            <value>
            The magnitude of this instance.
            </value>
        </member>
        <member name="P:System.Numerics.ComplexF.Phase">
            <summary>
            Gets the phase of this instance.
            </summary>
            <value>
            The phase of this instance.
            </value>
        </member>
        <member name="M:System.Numerics.ComplexF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.ComplexF"/> struct.
            </summary>
            <param name="real">The real part.</param>
            <param name="imaginary">The imaginary part.</param>
        </member>
        <member name="M:System.Numerics.ComplexF.#ctor(System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.ComplexF"/> struct.
            </summary>
            <param name="value">The value vector X=Real, Y=Imaginary.</param>
        </member>
        <member name="F:System.Numerics.ComplexF.inverseLog10">
            <summary>
            The inverse of ln(10)
            </summary>
            <autogeneratedoc />
        </member>
        <member name="F:System.Numerics.ComplexF.Zero">
            <summary>
            Returns a new Complex instance with a real number equal to zero and an imaginary number equal to zero.
            </summary>
        </member>
        <member name="F:System.Numerics.ComplexF.One">
            <summary>
            Returns a new Complex instance with a real number equal to one and an imaginary number equal to zero.
            </summary>
        </member>
        <member name="F:System.Numerics.ComplexF.ImaginaryOne">
            <summary>
            Returns a new Complex instance with a real number equal to zero and an imaginary number equal to one.
            </summary>
        </member>
        <member name="M:System.Numerics.ComplexF.op_UnaryNegation(System.Numerics.ComplexF)">
            <summary>
            Returns the additive inverse of a specified complex number.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>
            The result of the <see cref="P:System.Numerics.ComplexF.Real"/> and <see cref="P:System.Numerics.ComplexF.Imaginary"/> components of the value parameter multiplied by -1.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Subtraction(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Subtracts a complex number from another complex number.
            </summary>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Addition(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Adds two complex numbers.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The sum of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Multiply(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Multiplies two specified complex numbers.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>
            The product of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Multiply(System.Numerics.ComplexF,System.Single)">
            <summary>
            Multiplies specified complex number with specified real number.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>
            The product of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Division(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Divides a specified complex number by another specified complex number.
            </summary>
            <param name="left">The value to be divided.</param>
            <param name="right">The value to divide by.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Equality(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Indicates whether the values of two specified <see cref="T:System.Numerics.ComplexF"/> objects are equal.
            </summary>
            <param name="complex1">The first <see cref="T:System.Numerics.ComplexF"/> to compare.</param>
            <param name="complex2">The second <see cref="T:System.Numerics.ComplexF"/> to compare.</param>
            <returns>
              <c>true</c> if the value of complex1 is the same as the value of complex2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Inequality(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Indicates whether the values of two specified <see cref="T:System.Numerics.ComplexF"/> objects are not equal.
            </summary>
            <param name="complex1">The first <see cref="T:System.Numerics.ComplexF"/> to compare.</param>
            <param name="complex2">The second <see cref="T:System.Numerics.ComplexF"/> to compare.</param>
            <returns>
              <c>true</c> if complex1 and complex2 are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.Equals(System.Numerics.ComplexF)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts this instance to string.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Implicit(System.Numerics.ComplexF)~System.Numerics.Complex">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Numerics.ComplexF"/> to <see cref="T:System.Numerics.Complex"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Implicit(System.Single)~System.Numerics.ComplexF">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:System.Numerics.ComplexF"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.op_Explicit(System.Numerics.Complex)~System.Numerics.ComplexF">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Complex"/> to <see cref="T:System.Numerics.ComplexF"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.Abs(System.Numerics.ComplexF)">
            <summary>
            Gets the absolute value (or magnitude) of a complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The absolute value of <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Numerics.ComplexF.Conjugate(System.Numerics.ComplexF)">
            <summary>
            Computes the conjugate of a complex number and returns the result.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The conjugate of <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Numerics.ComplexF.Reciprocal(System.Numerics.ComplexF)">
            <summary>
            Returns the multiplicative inverse of a complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The reciprocal of <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.Numerics.ComplexF.Add(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Adds two complex numbers and returns the result.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The sum of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.Subtract(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Subtracts a complex number from another complex number and returns the result.
            </summary>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.Multiply(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Multiplies two specified complex numbers.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>
            The product of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.Divide(System.Numerics.ComplexF,System.Numerics.ComplexF)">
            <summary>
            Divides a specified complex number by another specified complex number.
            </summary>
            <param name="left">The value to be divided.</param>
            <param name="right">The value to divide by.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.Negate(System.Numerics.ComplexF)">
            <summary>
            Returns the additive inverse of a specified complex number.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>
            The result of the <see cref="P:System.Numerics.ComplexF.Real"/> and <see cref="P:System.Numerics.ComplexF.Imaginary"/> components of the value parameter multiplied by -1.
            </returns>
        </member>
        <member name="M:System.Numerics.ComplexF.FromPolarCoordinates(System.Double,System.Double)">
            <summary>
            Creates a complex number from a point's polar coordinates.
            </summary>
            <param name="magnitude">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</param>
            <param name="phase">The phase, which is the angle from the line to the horizontal axis, measured in radians.</param>
            <returns>A complex number.</returns>
        </member>
        <member name="M:System.Numerics.ComplexF.FromPolarCoordinates(System.Single,System.Single)">
            <summary>
            Creates a complex number from a point's polar coordinates.
            </summary>
            <param name="magnitude">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</param>
            <param name="phase">The phase, which is the angle from the line to the horizontal axis, measured in radians.</param>
            <returns>A complex number.</returns>
        </member>
        <member name="M:System.Numerics.ComplexF.Sqrt(System.Numerics.ComplexF)">
            <summary>
            Returns the square root of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The square root of <paramref name="value"/>.</returns>
        </member>
        <member name="T:System.SpanUtils">
            <summary>
            Utility for <see cref="T:System.Span`1"/>s.
            </summary>
        </member>
        <member name="M:System.SpanUtils.SplitHalf``1(System.Span{``0},System.Span{``0}@,System.Span{``0}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:System.SpanUtils.SplitHalfInternal``1(System.Span{``0},System.Span{``0}@,System.Span{``0}@)">
            <summary>Splits the specified array to front and back halfs.</summary>
            <param name="source">The source.</param>
            <param name="front">The front elements.</param>
            <param name="back">The back elements.</param>
        </member>
        <member name="M:System.SpanUtils.SplitQuarter``1(System.Span{``0},System.Span{``0}@,System.Span{``0}@,System.Span{``0}@,System.Span{``0}@)">
            <summary>
            Splits the specified array to 1-4 quarters.
            </summary>
            <typeparam name="T">Type of Span</typeparam>
            <param name="source">The source.</param>
            <param name="head">The head.</param>
            <param name="q2">The q2.</param>
            <param name="q3">The q3.</param>
            <param name="tail">The tail.</param>
        </member>
        <member name="M:System.SpanUtils.SplitOddEven``1(System.Span{``0},System.Span{``0}@,System.Span{``0}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <typeparam name="T">Type of Span</typeparam>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:System.SpanUtils.SplitOddEvenSlim``1(System.Span{``0},System.Span{``0}@,System.Span{``0}@)">
            <summary>Splits the specified array of <c>unmanaged</c> type to odd even index.</summary>
            <typeparam name="T">Type of Span that can <c>stackalloc</c>.</typeparam>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
            <exception cref="T:System.ArgumentException">The source's length was odd.</exception>
        </member>
        <member name="M:System.SpanUtils.ArrangeOddEven``1(System.Span{``0},System.Span{``0}@,System.Span{``0}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <typeparam name="T">Type of Span</typeparam>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
        <member name="M:System.SpanUtils.ArrangeOddEvenUnmanaged``1(System.Span{``0},System.Span{``0}@,System.Span{``0}@)">
            <summary>Splits the specified array to odd even index.</summary>
            <typeparam name="T">Type of Span</typeparam>
            <param name="source">The source.</param>
            <param name="even">The even elements.</param>
            <param name="odd">The odd elements.</param>
        </member>
    </members>
</doc>
