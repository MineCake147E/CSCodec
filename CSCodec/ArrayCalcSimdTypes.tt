<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# var typegenAddSub = new string[]{
"int", "uint", "long", "ulong", "short", "ushort", "sbyte", "byte",
"float", "double"}; #>
<# var typegenMul = new string[]{"int", "short", "float", "double"}; #>
<# var typegenNeg = new string[]{"int", "long", "float", "double"}; #>
<# var typegenNegCast = new string[]{"short", "sbyte"}; #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Diagnostics;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace CSCodec{
	public static partial class MathV
	{
	<#foreach(var type in typegenAddSub){#>
		/// <summary>
		/// Adds values from <paramref name="bufferB"/> to <paramref name="bufferA"/>.
		/// <paramref name="bufferA"/> will be overwritten.
		/// </summary>
		/// <param name="bufferA">The destination <see cref="Span{T}"/></param>
		/// <param name="bufferB"></param>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		[DebuggerNonUserCode()]
		public static void AddArray(Span<<#= type #>> bufferA, ReadOnlySpan<<#= type #>> bufferB)
		{
			if (bufferB.Length > bufferA.Length) throw new ArgumentException("Insufficient buffer.", nameof(bufferA));
            var remainder = bufferB.Length % Vector<<#= type #>>.Count;
            var newLength = bufferB.Length - remainder;
            if (newLength != 0)
            {
                var src = MemoryMarshal.Cast<<#= type #>, Vector<<#= type #>>>(bufferB);
                var dst = MemoryMarshal.Cast<<#= type #>, Vector<<#= type #>>>(bufferA).Slice(0, src.Length);
                for (int i = 0; i < src.Length; i++)
                {
                    dst[i] += src[i];
                }
            }
            if (remainder != 0)
            {
                var srcRem = bufferB.Slice(newLength);
                var dstRem = bufferA.Slice(newLength).Slice(0, srcRem.Length);
                for (int i = 0; i < srcRem.Length; i++)
                {
                    dstRem[i] += srcRem[i];
                }
            }
		}
		/// <summary>
		/// Subtracts <paramref name="bufferB"/> from <paramref name="bufferA"/>.
		/// <paramref name="bufferA"/> will be overwritten.
		/// </summary>
		/// <param name="bufferA"></param>
		/// <param name="bufferB"></param>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		[DebuggerNonUserCode()]
		public static void SubtractArray(Span<<#= type #>> bufferA, ReadOnlySpan<<#= type #>> bufferB)
		{
			if (bufferB.Length > bufferA.Length) throw new ArgumentException("Insufficient buffer.", nameof(bufferA));
            var remainder = bufferB.Length % Vector<<#= type #>>.Count;
            var newLength = bufferB.Length - remainder;
            if (newLength != 0)
            {
                var src = MemoryMarshal.Cast<<#= type #>, Vector<<#= type #>>>(bufferB);
                var dst = MemoryMarshal.Cast<<#= type #>, Vector<<#= type #>>>(bufferA).Slice(0, src.Length);
                for (int i = 0; i < src.Length; i++)
                {
                    dst[i] -= src[i];
                }
            }
            if (remainder != 0)
            {
                var srcRem = bufferB.Slice(newLength);
                var dstRem = bufferA.Slice(newLength).Slice(0, srcRem.Length);
                for (int i = 0; i < srcRem.Length; i++)
                {
                    dstRem[i] -= srcRem[i];
                }
            }
		}
	<# } #>
	<#foreach(var type in typegenNeg){#>

		/// <summary>
		/// Negates the specified <paramref name="span"/>.
		/// </summary>
		/// <param name="span">The region to Negate.</param>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		[DebuggerNonUserCode()]
		public static void NegateArray(this Span<<#= type #>> span)
		{
			if (Vector<<#= type #>>.Count > span.Length)
            {
                for (int i = 0; i < span.Length; i++)
                {
                    span[i] = -span[i];
                }
            }
            else
            {
                var spanV = MemoryMarshal.Cast<<#= type #>, Vector<<#= type #>>>(span);
                for (int i = 0; i < spanV.Length; i++)
                {
                    spanV[i] = -spanV[i];
                }
                var spanR = span.Slice(spanV.Length * Vector<<#= type #>>.Count);
                for (int i = 0; i < spanR.Length; i++)
                {
                    spanR[i] = -spanR[i];
                }
            }
		}
	<#}#>
	<#foreach(var type in typegenNegCast){#>

		/// <summary>
		/// Negates the specified <paramref name="span"/>.
		/// </summary>
		/// <param name="span">The region to Negate.</param>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		[DebuggerNonUserCode()]
		public static void NegateArray(this Span<<#= type #>> span)
		{
			if (Vector<<#= type #>>.Count > span.Length)
            {
                for (int i = 0; i < span.Length; i++)
                {
                    span[i] = (<#= type #>)-span[i];
                }
            }
            else
            {
                var spanV = MemoryMarshal.Cast<<#= type #>, Vector<<#= type #>>>(span);
                for (int i = 0; i < spanV.Length; i++)
                {
                    spanV[i] = -spanV[i];
                }
                var spanR = span.Slice(spanV.Length * Vector<<#= type #>>.Count);
                for (int i = 0; i < spanR.Length; i++)
                {
                    spanR[i] = (<#= type #>)-spanR[i];
                }
            }
		}
	<#}#>
	}
}
